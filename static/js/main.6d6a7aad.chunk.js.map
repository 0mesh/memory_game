{"version":3,"sources":["components/Card.js","components/Navbar1.js","components/LevelSelector.js","components/MemoryGame.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","style","Visible","backgroundColor","onClick","className","numCards","Navbar1","Navbar","bg","variant","Brand","href","Nav","Link","onNewGame","LevelSelector","sendingData","value","changeLevel","state","level","onChange","event","target","type","id","name","htmlFor","defaultChecked","Component","CardState","MemoryGame","newState","cards","makeCards","noClick","clicks","cardsMatched","setState","previousBest","easy","medium","hard","expert","clickHandler","bind","handleNewGame","colors","numColors","this","visibleTime","Cards","index","element1","cardState","color","element2","push","shuffle","prevState","MapCardState","idsToChange","newCardState","map","card","includes","foundCard","find","showingCards","filter","ids","length","setTimeout","l","click","previousbestobj","hidingCards","arr","key","Container","Row","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mVAeeA,MAZf,SAAcC,GACZ,IAAIC,EAAO,GAIX,OAHGD,EAAME,UACPD,EAAME,gBAAiBH,EAAMG,iBAG7B,yBAAKC,QAAWJ,EAAMI,QAASC,UAA6B,KAAjBL,EAAMM,SAAc,yBAAyB,wBAAyBL,MAAQA,K,gBCO9GM,MAbf,SAAiBP,GACf,OACE,oCACA,kBAACQ,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QAC1B,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,KAAnB,eACA,kBAACC,EAAA,EAAD,CAAKR,UAAU,WACf,kBAACQ,EAAA,EAAIC,KAAL,CAAUF,KAAK,IAAIR,QAASJ,EAAMe,WAAlC,gBC+DWC,EApEf,kDACE,WAAYhB,GAAQ,IAAD,8BACjB,cAAMA,IAeRiB,YAAa,SAACC,GACZ,EAAKlB,MAAMmB,YAAYD,IAdvB,EAAKE,MAAQ,CACVC,MAAM,UAJQ,EADrB,qDAoBY,IAAD,OACP,OACE,oCAEA,yBAAKC,SAAU,SAACC,GAAD,OAAS,EAAKN,YAAYM,EAAMC,OAAON,SAc5D,yBAAMb,UAAU,qDACd,2BAAOoB,KAAK,QAAQpB,UAAU,uBAAuBqB,GAAG,iBAAiBR,MAAM,OAAOS,KAAK,UAC3F,2BAAOtB,UAAU,uBAAuBuB,QAAQ,kBAAhD,SAIF,yBAAMvB,UAAU,qDACd,2BAAOoB,KAAK,QAAQpB,UAAU,uBAAuBqB,GAAG,iBAAiBR,MAAM,SAASS,KAAK,QAAQE,gBAAc,IACnH,2BAAOxB,UAAU,uBAAuBuB,QAAQ,kBAAhD,WAIF,yBAAMvB,UAAU,qDACd,2BAAOoB,KAAK,QAAQpB,UAAU,uBAAuBqB,GAAG,iBAAiBR,MAAM,OAAOS,KAAK,UAC3F,2BAAOtB,UAAU,uBAAwBuB,QAAQ,kBAAjD,SAGF,yBAAMvB,UAAU,qDACd,2BAAOoB,KAAK,QAAQpB,UAAU,uBAAuBqB,GAAG,iBAAiBR,MAAM,SAASS,KAAK,UAC7F,2BAAOtB,UAAU,uBAAuBuB,QAAQ,kBAAhD,iBAzDF,GAAmCE,a,gBCK7BC,EACI,EADJA,EAEK,EAFLA,EAGK,EAgMIC,EA9Lf,kDACE,WAAYhC,GAAQ,IAAD,8BACjB,cAAMA,IAsJRmB,YAAc,SAACD,GACb,IAAIe,EAAW,CACbC,MAAO,EAAKC,UAAUjB,GAAQkB,SAAS,EAAOf,MAAOH,EAAOmB,OAAQ,EACpEC,aAAc,GAGhB,EAAKC,SAASN,IAzJd,EAAKb,MAAQ,CAEXc,MAAO,EAAKC,YACZC,SAAS,EACTf,MAAO,SACPgB,OAAQ,EACRC,aAAc,EACdE,aAAc,CACZC,KAAM,IACNC,OAAQ,IACRC,KAAM,IACNC,OAAQ,MAMZ,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBAtBJ,EADrB,wDA0B+B,IAAnBzB,EAAkB,uDAAV,SACZ2B,EAAS,CACX,MACA,SACA,OACA,SACA,OACA,SACA,QACA,OACA,QACA,aACA,UACA,mBACA,cACA,OACA,UACA,SAEEC,EAAY,EAEF,SAAV5B,GAA8B,WAAVA,IACtB4B,EAAY,IAEA,WAAV5B,GAAgC,WAAVA,IACxB6B,KAAKC,YAAc,KAGrB,IADA,IAAIC,EAAQ,GACHC,EAAQ,EAAGA,EAAQJ,EAAWI,IAAS,CAC9C,IAAIC,EAAW,CACb5B,GAAI,EAAI2B,EACRE,UAAWxB,EACXyB,MAAOR,EAAOK,IAEZI,EAAW,CACb/B,GAAI,EAAI2B,EAAQ,EAChBE,UAAWxB,EACXyB,MAAOR,EAAOK,IAEhBD,EAAMM,KAAKJ,EAAUG,GAGvB,OADAL,EAAQO,IAAQP,KAnEpB,mCAuEe1B,GAAK,IAAD,QACY,IAAvBwB,KAAK9B,MAAMgB,SACbc,KAAKX,UAAS,SAAAqB,GACZ,MAAO,CAAEvB,OAAQuB,EAAUvB,OAAS,MAGxC,IAAMwB,EAAe,SAAC3B,EAAO4B,EAAaC,GACxC,OAAO7B,EAAM8B,KAAI,SAACC,GAChB,OAAIH,EAAYI,SAASD,EAAKvC,IACrB,2BACFuC,GADL,IAEEV,UAAWQ,IAGRE,MAGLE,EAAYjB,KAAK9B,MAAMc,MAAMkC,MAAK,SAACH,GAAD,OAAUA,EAAKvC,KAAOA,KAE9D,IAAIwB,KAAK9B,MAAMgB,SAAW+B,EAAUZ,YAAcxB,EAAlD,CAIA,IAAIK,GAAU,EACVF,EAAQ2B,EAAaX,KAAK9B,MAAMc,MAAO,CAACR,GAAKK,GAE3CsC,EAAenC,EAAMoC,QACzB,SAACL,GAAD,OAAUA,EAAKV,YAAcxB,KAGzBwC,EAAMF,EAAaL,KAAI,SAACC,GAAD,OAAUA,EAAKvC,MAE5C,GAC0B,IAAxB2C,EAAaG,QACbH,EAAa,GAAGb,QAAUa,EAAa,GAAGb,MAE1CtB,EAAQ2B,EAAa3B,EAAOqC,EAAKxC,GACjCmB,KAAKX,UAAS,SAAAqB,GACZ,MAAO,CAAEtB,aAAcsB,EAAUtB,aAAe,MAC/C,WACDmC,YAAW,WACT,GAAI,EAAKrD,MAAMkB,eAAiB,EAAKlB,MAAMc,MAAMsC,OAAQ,CACvD,IAAIE,EAAI,EAAKtD,MAAMC,MACfsD,EAAQ,EAAKvD,MAAMiB,OACvB,GAAmC,MAA/B,EAAKjB,MAAMoB,aAAakC,IAAc,EAAKtD,MAAMoB,aAAakC,IAAMC,EAAO,CAC7E,IAAIC,EAAkB,EAAKxD,MAAMoB,aACjCoC,EAAgBF,GAAKC,EACrB,EAAKpC,SAAS,CAAEC,aAAcoC,IAGhC,EAAK7B,mBAEN,cAIA,GAA4B,IAAxBsB,EAAaG,OAAc,CACpC,IAAIK,EAAchB,EAAa3B,EAAOqC,EAAKxC,GAW3C,OAVAK,GAAU,OACVc,KAAKX,SAAS,CAAEL,QAAOE,YAAW,WAEhCqC,YACE,kBAAM,EAAKlC,SAAS,CAAEL,MAAO2C,EAAazC,SAAS,MAE9B,WAArB,EAAKhB,MAAMC,OAA2C,WAArB,EAAKD,MAAMC,MAAqB,IAAM,QAM7E6B,KAAKX,SAAS,CAAEL,MAAOA,EAAOE,eA7IlC,sCAiJI,IAAIF,EAAQgB,KAAK9B,MAAMc,MAAM8B,KAAI,SAACC,GAAD,mBAAC,eAC7BA,GAD4B,IAE/BV,UAAWxB,OAEbG,EAAQyB,IAAQzB,GAChBgB,KAAKX,SAAS,CAAEL,MAAOA,EAAOG,OAAQ,EAAGC,aAAc,MAtJ3D,+BAgKY,IAAD,OACDJ,EAAQgB,KAAK9B,MAAMc,MAAM8B,KAAI,SAACC,EAAMvC,EAAIoD,GAAX,OACjC,kBAAC,EAAD,CACExE,SAAUwE,EAAIN,OACdO,IAAKd,EAAKvC,GACVxB,QAAS+D,EAAKV,YAAcxB,EAC5B5B,gBAAiB8D,EAAKT,MACtBpD,QAAS,kBAAM,EAAKyC,aAAaoB,EAAKvC,UAG1C,OACE,6BACE,kBAAC,EAAD,CAASX,UAAWmC,KAAKH,gBACzB,kDAAuB,oCAAUG,KAAK9B,MAAMiB,QAC1C,6BACA,iDAAuBa,KAAK9B,MAAMoB,aAAaU,KAAK9B,MAAMC,SAE5D,kBAAC,EAAD,CAAeF,YAAa+B,KAAK/B,YAAY2B,KAAKI,QAClD,kBAAC8B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAEG/C,SArLb,GAAgCJ,aCAjBoD,MATf,WACE,OACE,yBAAK7E,UAAU,OACb,kBAAC,EAAD,QCIc8E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6d6a7aad.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"./Card.css\"\r\n\r\nfunction Card(props) {\r\n  let style ={}\r\n  if(props.Visible){\r\n    style.backgroundColor =props.backgroundColor\r\n  }\r\n  return (\r\n    <div onClick = {props.onClick} className ={props.numCards===16?\"card-container card16 \":\"card-container card32\"} style ={style}>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card\r\n","import React from 'react'\r\nimport Navbar from \"react-bootstrap/Navbar\"\r\nimport Nav from \"react-bootstrap/Nav\"\r\nfunction Navbar1(props) {\r\n  return (\r\n    <>\r\n    <Navbar bg=\"dark\" variant=\"dark\">\r\n    <Navbar.Brand href=\"#\">Memory Game</Navbar.Brand>\r\n    <Nav className=\"mr-auto\">\r\n    <Nav.Link href=\"#\" onClick={props.onNewGame} >New Game</Nav.Link>\r\n    </Nav>\r\n  </Navbar>\r\n   </>\r\n  )\r\n}\r\n\r\nexport default Navbar1\r\n ","import React, { Component } from 'react'\r\n\r\n\r\n\r\nexport class LevelSelector extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n  \r\n    this.state = {\r\n       level:\"medium\"\r\n\r\n    }\r\n  // this.changeLevel =this.changeLevel.bind(this)\r\n  }\r\n  // changeLevel(event){\r\n  //   this.setState({\r\n  //     level:event.target.value\r\n  //   },()=><MemoryGame level = {this.state.level}/> )\r\n    \r\n  // }\r\n\r\n  sendingData =(value)=>{\r\n    this.props.changeLevel(value)\r\n  }\r\n  render() {\r\n    return (\r\n      <>\r\n    \r\n      <div onChange={(event)=>this.sendingData(event.target.value)} >\r\n        {/* <label>\r\n    <input  type=\"radio\" name=\"level\" value=\"easy\"/>Easy\r\n</label>\r\n<label>\r\n    <input  type=\"radio\" name=\"level\" defaultChecked value=\"medium\"/>Medium\r\n</label>\r\n<label>\r\n    <input  type=\"radio\" name=\"level\" value=\"hard\"/>Hard\r\n</label>\r\n<label>\r\n    <input type=\"radio\" name=\"level\" value=\"expert\"/>Expert\r\n</label> */}\r\n\r\n<div  className=\"custom-control custom-radio custom-control-inline\">\r\n  <input type=\"radio\" className=\"custom-control-input\" id=\"defaultInline1\" value=\"easy\" name=\"level\"/>\r\n  <label className=\"custom-control-label\" htmlFor=\"defaultInline1\">Easy</label>\r\n</div>\r\n\r\n\r\n<div  className=\"custom-control custom-radio custom-control-inline\">\r\n  <input type=\"radio\" className=\"custom-control-input\" id=\"defaultInline2\" value=\"medium\" name=\"level\" defaultChecked />\r\n  <label className=\"custom-control-label\" htmlFor=\"defaultInline2\">Medium</label>\r\n</div>\r\n\r\n\r\n<div  className=\"custom-control custom-radio custom-control-inline\">\r\n  <input type=\"radio\" className=\"custom-control-input\" id=\"defaultInline3\" value=\"hard\" name=\"level\"/>\r\n  <label className=\"custom-control-label\"  htmlFor=\"defaultInline3\">Hard</label>\r\n</div>\r\n\r\n<div  className=\"custom-control custom-radio custom-control-inline\">\r\n  <input type=\"radio\" className=\"custom-control-input\" id=\"defaultInline4\" value=\"expert\" name=\"level\"/>\r\n  <label className=\"custom-control-label\" htmlFor=\"defaultInline4\">Expert</label>\r\n</div>\r\n</div>\r\n      </>\r\n      \r\n\r\n      \r\n    )\r\n  }\r\n}\r\n\r\nexport default LevelSelector\r\n","import React, { Component } from 'react';\r\nimport shuffle from 'shuffle-array';\r\nimport Card from './Card';\r\nimport Navbar1 from './Navbar1';\r\nimport LevelSelector from './LevelSelector';\r\n\r\nimport Container from 'react-bootstrap/Container'\r\n\r\nimport Row from 'react-bootstrap/Row'\r\nconst CardState = {\r\n  Hiding: 0,\r\n  Visible: 1,\r\n  Matched: 2,\r\n};\r\nexport class MemoryGame extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n\r\n    this.state = {\r\n\r\n      cards: this.makeCards(),\r\n      noClick: false,\r\n      level: \"medium\",\r\n      clicks: 0,\r\n      cardsMatched: 0,\r\n      previousBest: {\r\n        easy: \"-\",\r\n        medium: \"-\",\r\n        hard: \"-\",\r\n        expert: \"-\"\r\n      }\r\n\r\n\r\n    };\r\n\r\n    this.clickHandler = this.clickHandler.bind(this);\r\n    this.handleNewGame = this.handleNewGame.bind(this);\r\n\r\n  }\r\n  makeCards(level = \"medium\") {\r\n    let colors = [\r\n      'red',\r\n      'yellow',\r\n      'pink',\r\n      'purple',\r\n      'blue',\r\n      'orange',\r\n      'green',\r\n      'navy',\r\n      'brown',\r\n      'blueviolet',\r\n      'magenta',\r\n      'mediumaquamarine',\r\n      'greenyellow',\r\n      'gold',\r\n      'skyblue',\r\n      'olive',\r\n    ];\r\n    let numColors = 8;\r\n\r\n    if (level === 'hard' || level === 'expert') {\r\n      numColors = 16;\r\n    }\r\n    if (level === \"medium\" || level === \"expert\") {\r\n      this.visibleTime = 500\r\n    }\r\n    var Cards = [];\r\n    for (let index = 0; index < numColors; index++) {\r\n      let element1 = {\r\n        id: 2 * index,\r\n        cardState: CardState.Hiding,\r\n        color: colors[index],\r\n      };\r\n      let element2 = {\r\n        id: 2 * index + 1,\r\n        cardState: CardState.Hiding,\r\n        color: colors[index],\r\n      };\r\n      Cards.push(element1, element2);\r\n    }\r\n    Cards = shuffle(Cards);\r\n    return Cards\r\n  }\r\n\r\n  clickHandler(id) {\r\n    if (this.state.noClick === false) {\r\n      this.setState(prevState => {\r\n        return { clicks: prevState.clicks + 1 }\r\n      })\r\n    }\r\n    const MapCardState = (cards, idsToChange, newCardState) => {\r\n      return cards.map((card) => {\r\n        if (idsToChange.includes(card.id)) {\r\n          return {\r\n            ...card,\r\n            cardState: newCardState,\r\n          };\r\n        }\r\n        return card;\r\n      });\r\n    };\r\n    const foundCard = this.state.cards.find((card) => card.id === id);\r\n\r\n    if (this.state.noClick || foundCard.cardState !== CardState.Hiding) {\r\n      return;\r\n    }\r\n\r\n    let noClick = false;\r\n    let cards = MapCardState(this.state.cards, [id], CardState.Visible);\r\n\r\n    const showingCards = cards.filter(\r\n      (card) => card.cardState === CardState.Visible\r\n    );\r\n\r\n    const ids = showingCards.map((card) => card.id);\r\n\r\n    if (\r\n      showingCards.length === 2 &&\r\n      showingCards[0].color === showingCards[1].color\r\n    ) {\r\n      cards = MapCardState(cards, ids, CardState.Matched);\r\n      this.setState(prevState => {\r\n        return { cardsMatched: prevState.cardsMatched + 2 }\r\n      }, () => {\r\n        setTimeout(() => {\r\n          if (this.state.cardsMatched === this.state.cards.length) {\r\n            let l = this.state.level;\r\n            let click = this.state.clicks\r\n            if (this.state.previousBest[l] === \"-\" || this.state.previousBest[l] >= click) {\r\n              var previousbestobj = this.state.previousBest\r\n              previousbestobj[l] = click\r\n              this.setState({ previousBest: previousbestobj })\r\n            }\r\n\r\n            this.handleNewGame();\r\n          }\r\n        }, 1200)\r\n      })\r\n\r\n\r\n    } else if (showingCards.length === 2) {\r\n      let hidingCards = MapCardState(cards, ids, CardState.Hiding);\r\n      noClick = true;\r\n      this.setState({ cards, noClick }, () => {\r\n\r\n        setTimeout(\r\n          () => this.setState({ cards: hidingCards, noClick: false }),\r\n\r\n          this.state.level === \"medium\" || this.state.level === \"expert\" ? 400 : 1000\r\n        );\r\n\r\n      });\r\n      return;\r\n    }\r\n    this.setState({ cards: cards, noClick });\r\n  }\r\n\r\n  handleNewGame() {\r\n    let cards = this.state.cards.map((card) => ({\r\n      ...card,\r\n      cardState: CardState.Hiding,\r\n    }));\r\n    cards = shuffle(cards);\r\n    this.setState({ cards: cards, clicks: 0, cardsMatched: 0 });\r\n  }\r\n  changeLevel = (value) => {\r\n    let newState = {\r\n      cards: this.makeCards(value), noClick: false, level: value, clicks: 0,\r\n      cardsMatched: 0,\r\n    }\r\n\r\n    this.setState(newState);\r\n  }\r\n  render() {\r\n    const cards = this.state.cards.map((card, id, arr) => (\r\n      <Card\r\n        numCards={arr.length}\r\n        key={card.id}\r\n        Visible={card.cardState !== CardState.Hiding}\r\n        backgroundColor={card.color}\r\n        onClick={() => this.clickHandler(card.id)}\r\n      />\r\n    ));\r\n    return (\r\n      <div>\r\n        <Navbar1 onNewGame={this.handleNewGame} />\r\n        <p> Number of Clicks:  <strong> {this.state.clicks}</strong>\r\n          <br></br>\r\n          <strong>Previous best {this.state.previousBest[this.state.level]}</strong></p>\r\n\r\n        <LevelSelector changeLevel={this.changeLevel.bind(this)} />\r\n        <Container>\r\n          <Row>\r\n\r\n            {cards}\r\n\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MemoryGame;\r\n","import React from 'react';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport MemoryGame from './components/MemoryGame';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MemoryGame/>\n        \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}